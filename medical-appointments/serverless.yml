service: medical-appointments
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}
    SNS_TOPIC_ARN:
      Ref: AppointmentSnsTopic
    EVENT_BUS_NAME:
      Ref: AppointmentEventBus
    RDS_HOST: ${env:RDS_HOST}
    RDS_USER: ${env:RDS_USER}
    RDS_PASSWORD: ${env:RDS_PASSWORD}
    RDS_DATABASE_PE: ${env:RDS_DATABASE_PE}
    RDS_DATABASE_CL: ${env:RDS_DATABASE_CL}

plugins:
  - serverless-dotenv-plugin
  - serverless-openapi-documentation

functions:
  appointment:
    handler: src/handlers/appointment.postAppointment
    events:
      - http:
          path: appointments
          method: post
          documentation:
            summary: Crear una cita médica
            description: Registra una cita en DynamoDB y publica un evento SNS.
            requestBody:
              description: Datos del agendamiento
              required: true
            requestModels:
              "application/json": CreateAppointmentRequest
            methodResponses:
              - statusCode: 202
                responseBody:
                  description: Cita registrada correctamente
                responseModels:
                  "application/json": AppointmentCreatedResponse
              - statusCode: 400
                responseBody:
                  description: Error en los datos de entrada
                responseModels:
                  "application/json": ErrorResponse400Create
              - statusCode: 422
                responseBody:
                  description: Error en los datos de entrada
                responseModels:
                  "application/json": ErrorResponse422Country
              - statusCode: 500
                responseBody:
                  description: Error interno del servidor
                responseModels:
                  "application/json": ErrorResponse500
      - http:
          path: appointments/{insuredId}
          method: get
          documentation:
            summary: Consultar citas de un asegurado
            description: Devuelve todas las citas registradas de un asegurado dado.
            pathParams:
              - name: insuredId
                description: ID del asegurado
                required: true
                type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Lista de citas encontradas
                responseModels:
                  "application/json": AppointmentList
              - statusCode: 400
                responseBody:
                  description: Parámetro insuredId faltante
                responseModels:
                  "application/json": ErrorResponse400GetIn
              - statusCode: 500
                responseBody:
                  description: Error interno del servidor
                responseModels:
                  "application/json": ErrorResponse500
      - sqs:
          arn:
            Fn::GetAtt:
              - AppointmentConfirmationQueue
              - Arn
  appointment_pe:
    handler: src/handlers/appointment_pe.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsPeQueue
              - Arn
  appointment_cl:
    handler: src/handlers/appointment_cl.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsClQueue
              - Arn

custom:
  documentation:
    version: "1.0.0"
    title: API de Citas Médicas
    description: API REST para registrar y consultar citas médicas.
    models:
      - name: CreateAppointmentRequest
        contentType: application/json
        schema:
          type: object
          required:
            - insuredId
            - scheduleId
            - countryISO
          properties:
            insuredId:
              type: string
              example: "01234"
            scheduleId:
              type: number
              example: 100
            countryISO:
              type: string
              enum:
                - PE
                - CL
              example: "PE"

      - name: AppointmentCreatedResponse
        contentType: application/json
        schema:
          type: object
          properties:
            message:
              type: string
              example: "Appointment scheduled. Processing..."
            appointmentId:
              type: string
              example: "123"

      - name: AppointmentList
        contentType: application/json
        schema:
          type: array
          items:
            type: object
            properties:
              appointmentId:
                type: string
              insuredId:
                type: string
              scheduleId:
                type: number
              countryISO:
                type: string
              status:
                type: string
              createdAt:
                type: string
                format: date-time

      - name: ErrorResponse400Create
        contentType: application/json
        schema:
          type: object
          properties:
            error:
              type: string
              description: Mensaje de error
              example: "Missing required fields"
            details:
              type: string
              description: Detalles adicionales del error
              example: "The fields insuredId, scheduleId and countryISO are required"

      - name: ErrorResponse422Country
        contentType: application/json
        schema:
          type: object
          properties:
            error:
              type: string
              description: Mensaje de error
              example: "Error countryISO "
            details:
              type: string
              description: Detalles adicionales del error
              example: "countryISO must be PE or CL"
      - name: ErrorResponse400GetIn
        contentType: application/json
        schema:
          type: object
          properties:
            error:
              type: string
              description: Mensaje de error
              example: "Missing required fields"
            details:
              type: string
              description: Detalles adicionales del error
              example: "Missing insuredId param"

      - name: ErrorResponse500
        contentType: application/json
        schema:
          type: object
          properties:
            error:
              type: string
              description: Mensaje de error
              example: "Error"
            details:
              type: string
              description: Detalles adicionales del error
              example: "Internal Server Error"

resources:
  Resources:
    # DynamoDB table
    AppointmentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # SQS Queues for PE and CL
    SqsPeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-SQS_PE
    SqsClQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-SQS_CL

    # SNS Topic
    AppointmentSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
      TopicName: ${self:service}-${sls:stage}-appointments-topic

    # SNS subscriptions with filter policies
    SnsSubscriptionPe:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentSnsTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SqsPeQueue, Arn]
        FilterPolicy:
          countryISO:
            - PE

    SnsSubscriptionCl:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentSnsTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SqsClQueue, Arn]
        FilterPolicy:
          countryISO:
            - CL

    # EventBridge bus
    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}-${sls:stage}-eventbus

    # EventBridge Rule to route completed appointments to SQS confirmation queue
    AppointmentEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName:
          Ref: AppointmentEventBus
        EventPattern:
          source:
            - appointment.app
          detail-type:
            - AppointmentCompleted
        Targets:
          - Arn:
              Fn::GetAtt:
                - AppointmentConfirmationQueue
                - Arn
            Id: "AppointmentConfirmationTarget"

    # SQS queue for confirmations
    AppointmentConfirmationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-SQS_Confirmations

    # Permissions for SNS to send messages to SQS queues
    SqsPeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SqsPeQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [SqsPeQueue, Arn]
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: AppointmentSnsTopic
    SqsClQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SqsClQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [SqsClQueue, Arn]
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: AppointmentSnsTopic
    AppointmentConfirmationQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: AppointmentConfirmationQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [AppointmentConfirmationQueue, Arn]
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: AppointmentEventBus
